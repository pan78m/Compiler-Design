%{
#include <stdio.h>
void yyerror(char* s);
int yylex();
  /*Input
   a=2;
   */

%}
   /*** YACC Declarations section ***/
%token NUM ADD SUB MUL DIV ID ASSIGN SEMI
%start cal 
%left ADD SUB
%left MUL DIV

%%  
    /*** Rules Section ***/
cal: ID ASSIGN exp SEMI|exp
    
    ;
exp : exp ADD exp
    | exp SUB exp
    | exp MUL exp
    | exp DIV exp
    | NUM
    ;
/* int a=10; */

%%

int main(){
    yyparse();
    printf("Parsing Successful\n");
}

void yyerror(char* s){
    fprintf(stderr, "Error= %s", s);

}
/* 
In the provided code, your main logic for reading input from a 
file and writing output to a file is in the yyparse() function,
 which is part of the generated code. Specifically, 
 the yyparse() function is responsible for parsing the 
 input and generating the output.

Here's a breakdown of how it works:

The yyparse() function is called in your main function.
The yyparse() function uses the yylex() function to get 
tokens from the input file. The yylex() function is typically 
generated by Lex and reads input characters to produce tokens 
based on the specified patterns in your Lex file.
The parser (Yacc-generated code) processes these tokens
 based on the grammar rules you've defined. In your case, 
 it recognizes expressions and statements.
During this parsing process, any syntax errors 
would be handled by the yyerror() function, which you've 
defined to print an error message.
The main function also prints "Parsing Successful" at the end, 
indicating that the parsing process completed without encountering syntax errors.

If your code is working as expected and not generating any 
errors during the parsing process, it means that the input 
file is successfully read, and the corresponding output is
 generated based on your grammar rules.

To summarize, the key functions for input and output in your code are:

Input: yylex() function (typically generated by Lex) reads from the input file.
Output: yyparse() function (generated by Yacc) processes 
the input and generates output.
If your code is running without errors and producing
 the desired output, it indicates that the input 
 file is being successfully read, and the output 
 is being generated according to your grammar rules.
  */